openapi: 3.0.0
info:
  version: 0.0.0
  title: AlgoLearn
servers:
  - url: "http://localhost:8080"
paths:
  /user:
    get:
      summary: "Get all Users."
      operationId: listUser
      tags:
        - User
      responses:
        "200":
          description: "A list of all users"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Response User"
    post:
      summary: "Create a new user."
      operationId: createUser
      tags:
        - User
      parameters:
        - name: username
          in: path
          description: "Username of the user"
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/Auth Token"
      requestBody:
        description: "User object to create"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request User"
      responses:
        "200":
          description: "User Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response User"
  /user/{username}:
    get:
      summary: "Get a User by username."
      operationId: getUser
      tags:
        - User
      parameters:
        - name: username
          in: path
          description: "Username of the user"
          required: true
          schema:
            type: string
            format: string
      responses:
        "200":
          description: "Details about a user by username"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response User"
    patch:
      summary: "Modify an existing user by username."
      operationId: modifyUser
      tags:
        - User
      parameters:
        - name: username
          in: path
          description: "Username of the user"
          required: true
          schema:
            type: string
            format: string
        - $ref: "#/components/parameters/Auth Token"
      requestBody:
        description: "User object to create"
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                name:
                  type: string
                email:
                  type: string
                admin:
                  type: boolean
      responses:
        "200":
          description: "User Modified"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response User"
    put:
      summary: "Replace an existing user by username."
      operationId: replaceUser
      tags:
        - User
      parameters:
        - name: username
          in: path
          description: "Username of the user"
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/Auth Token"
      requestBody:
        description: "User object to create"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request User"
      responses:
        "200":
          description: "User Replaced"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response User"
    delete:
      summary: "Delete an existing user by username"
      operationId: deleteUser
      tags: 
        - User
      parameters:
        - name: username 
          in: path
          description: "Username of the user"
          required: true
          schema:
          type: string
        - $ref: "#/components/parameters/Auth Token"
      responses:
        "200":
          description: "User deleted"
  /user/search:
    get:
      summary: "Search for a user."
      operationId: searchUser
      tags:
        - User
      parameters:
        - name: username
          in: query
          description: "Part or all of the username of the user"
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: "Page number of search results"
          required: false
          schema:
            type: integer
        - name: name
          in: query
          description: "The name of the user"
          required: false
          schema:
            type: string
        - name: email
          in: query
          description: "The email of the user"
          required: false
          schema:
            type: string
        - name: admin
          in: query
          description: "Whether or not the user is an admin"
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: "List of users"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Response User"
  /problem:
    get:
      summary: "Get all problems"
      operationId: listProblems
      tags:
        - Problem
      responses:
        "200":
          description: "A list of all problems"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Response Problem"
    post:
      summary: "Create a new problem."
      operationId: createProblem
      tags:
        - Problem
      parameters:
        - name: poster
          in: path
          description: "Username of the user posting the problem"
          required: true
          schema:
            type: string
        - name: description
          in: path
          description: "The description of the problem"
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/Auth Token"
      responses:
        "200":
          description: "Problem Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response Problem"
  /problem/{problemId}:
    get:
      summary: "Get a problem by ID."
      operationId: getProblem
      tags:
        - Problem
      parameters:
        - name: problemId
          in: path
          description: "ID of the problem"
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "Details about a problem by ID"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response Problem"
    patch:
      summary: "Modify an existing problem by ID."
      operationId: modifyProblem
      tags:
        - Problem
      parameters:
        - name: problemId
          in: path
          description: "ID of the problem"
          required: true
          schema:
            type: integer
        - $ref: "#/components/parameters/Auth Token"
      requestBody:
        description: "Problem object to create"
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                problemid:
                  type: integer
                poster:
                  type: string
                reviewed:
                  type: boolean
                description:
                  type: string
      responses:
        "200":
          description: "Problem Modified"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response Problem"
    put:
      summary: "Replace an existing problem by ID."
      operationId: replaceProblem
      tags:
        - Problem
      parameters:
        - name: problemId
          in: path
          description: "ID of the problem"
          required: true
          schema:
            type: integer
        - $ref: "#/components/parameters/Auth Token"
      requestBody:
        description: "Problem object to create"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request Problem"
      responses:
        "200":
          description: "Problem Replaced"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response Problem"
  /problem/search:
    get:
      summary: "Search for a Problem."
      operationId: searchProblem
      tags:
        - Problem
      parameters:
        - name: poster
          in: query
          description: "Part or all of the username of the poster"
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: "Page number of search results"
          required: false
          schema:
            type: integer
        - name: reviewed
          in: query
          description: "Whether or not the problem has been reviewed by admins"
          required: false
          schema:
            type: boolean
        - name: description
          in: query
          description: "The poster's description of the problem"
          required: false
          schema:
            type: string
      responses:
        "200":
          description: "List of problems"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Response Problem"
  /parameter:
    get:
      summary: "Get all pararmeters"
      operationId: listParameters
      tags:
        - Parameter
      responses:
        "200":
          description: "A list of all parameters"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Parameter"
    post:
      summary: "Create a new parameter"
      operationId: createParameter
      tags:
        - Parameter
      parameters:
        - $ref: "#/components/parameters/Auth Token"
      requestBody:
        description: "Parameter object to create"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Parameter"
      responses:
        "200":
          description: "Parameter created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Parameter"
  /parameter/{problem}/{name}:
    get:
      summary: "Get a parameter by its problem and name"
      operationId: getParameter
      tags:
        - Parameter
      parameters:
        - name: problem
          in: path
          description: "ID of the problem this parameter is meant to be passed into"
          required: true
          schema:
            type: integer
        - name: name
          in: path
          description: "The name of the parameter"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Get a parameter by problem and name"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Parameter"
    patch:
      summary: "Modify an existing parameter by its problem and name."
      operationId: modifyParameter
      tags:
        - Parameter
      parameters:
        - name: problem
          in: path
          description: "ID of the parameter's problem"
          required: true
          schema:
            type: integer
        - name: name
          in: path
          description: "The parameter's name"
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/Auth Token"
      requestBody:
        description: "Parameter object to create"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Parameter"
      responses:
        "200":
          description: "Parameter modified"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Parameter"
    put:
      summary: "Replace an existing parameter with a new one"
      operationId: replaceParameter
      tags:
        - Parameter
      parameters:
        - name: problem
          in: path
          description: "ID of the parameter's problem"
          required: true
          schema:
            type: integer
        - name: name
          in: path
          description: "The parameter's name"
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/Auth Token"
      requestBody:
        description: "Parameter object to replace existing one with"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Parameter"
      responses:
        "200":
          description: "Parameter replaced"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Parameter"
  /parameter/search:
    get:
      summary: "Search for a parameter"
      operationId: searchParameter
      tags:
        - Parameter
      parameters:
        - name: problem
          in: query
          description: "Part or all of the ID of this parameter's problem"
          required: false
          schema:
            type: integer
        - name: page
          in: query
          description: "Page number of search results"
          required: false
          schema:
            type: integer
        - name: name
          in: query
          description: "The parameter's name"
          required: false
          schema:
            type: string
      responses:
        "200":
          description: "List of parameters"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Parameter"
  /testcase:
    get:
      summary: "Get all test cases"
      operationId: listTestCases
      tags:
        - Test Case
      responses:
        "200":
          description: "A list of all test cases"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Response Test Case"
    post:
      summary: "Create a new test case."
      operationId: createTestCase
      tags:
        - Test Case
      parameters:
        - $ref: "#/components/parameters/Auth Token"
      requestBody:
        description: "Test case object to create"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request Test Case"
      responses:
        "200":
          description: "Test case created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response Test Case"
  /testcase/{tcid}:
    get:
      summary: "Get a test case by ID"
      operationId: getTestCase
      tags:
        - Test Case
      parameters:
        - name: tcid
          in: path
          description: "ID of test case"
          required: true
          schema:
            type: integer
      requestBody:
        description: "Test case object to retrieve"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Response Test Case"
    patch:
      summary: "Modify an existing test case by ID."
      operationId: modifyTestCase
      tags:
        - Test Case
      parameters:
        - name: tcid
          in: path
          description: "ID of the test case"
          required: true
          schema:
            type: integer
        - $ref: "#/components/parameters/Auth Token"
      requestBody:
        description: "Test case object to create"
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tcid:
                  type: integer
                problem:
                  type: integer
                public:
                  type: boolean
                sampleInput:
                  type: string
                expectedOutput:
                  type: string
      responses:
        "200":
          description: "Test case Modified"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response Test Case"
    put:
      summary: "Replace an existing test case by ID."
      operationId: replaceTestCase
      tags:
        - Test Case
      parameters:
        - name: tcid
          in: path
          description: "ID of the test case"
          required: true
          schema:
            type: integer
        - $ref: "#/components/parameters/Auth Token"
      requestBody:
        description: "Test case object to create"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request Test Case"
      responses:
        "200":
          description: "Test case replaced"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response Test Case"
  /testcase/search:
    get:
      summary: "Search for a test case."
      operationId: searchTestCase
      tags:
        - Test Case
      parameters:
        - name: problem
          in: query
          description: "Part or all of the ID of this test case's problem"
          required: false
          schema:
            type: integer
        - name: page
          in: query
          description: "Page number of search results"
          required: false
          schema:
            type: integer
        - name: public
          in: query
          description: "Whether or not the test case is public"
          required: false
          schema:
            type: boolean
        - name: sampleInput
          in: query
          description: "The data to be input to the solution by this test case"
          required: false
          schema:
            type: string
        - name: expectedOutput
          in: query
          description: "The output that the solution should provide"
          required: false
          schema:
            type: string
      responses:
        "200":
          description: "List of test cases"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Response Test Case"
  /solution:
    get:
      summary: "Get all solutions"
      operationId: listSolutions
      tags:
        - Solution
      responses:
        "200":
          description: "A list of all solutions"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Response Solution"
    post:
      summary: "Create a new solution."
      operationId: createSolution
      tags:
        - Solution
      parameters:
        - $ref: "#/components/parameters/Auth Token"
      requestBody:
        description: "Solution object to create"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request Solution"
      responses:
        "200":
          description: "Solution created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response Solution"
  /solution/{solutionId}:
    get:
      summary: "Get a solution by ID."
      operationId: getSolution
      tags:
        - Solution
      parameters:
        - name: solutionId
          in: path
          description: "ID of the solution"
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: "Details about a solution by ID"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response Solution"
    patch:
      summary: "Modify an existing solution by ID."
      operationId: modifySolution
      tags:
        - Solution
      parameters:
        - name: solutionId
          in: path
          description: "ID of the solution"
          required: true
          schema:
            type: integer
        - $ref: "#/components/parameters/Auth Token"
      requestBody:
        description: "Solution object to create"
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                solutionId:
                  type: integer
                solver:
                  type: integer
                problem:
                  type: integer
                code:
                  type: string
                passedTests:
                  type: integer
                compTime:
                  type: string
      responses:
        "200":
          description: "Solution modified"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response Solution"
    put:
      summary: "Replace an existing solution by ID."
      operationId: replaceSolution
      tags:
        - Solution
      parameters:
        - name: solutionId
          in: path
          description: "ID of the solution"
          required: true
          schema:
            type: integer
        - $ref: "#/components/parameters/Auth Token"
      requestBody:
        description: "Solution object to create"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request Solution"
      responses:
        "200":
          description: "Solution Replaced"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response Solution"
  /solution/search:
    get:
      summary: "Search for a solution."
      operationId: searchSolution
      tags:
        - Solution
      parameters:
        - name: solver
          in: query
          description: "Part or all of the username of the user who submitted this solution"
          required: false
          schema:
            type: string
        - name: problem
          in: query
          description: "Part or all of the ID of this solution's problem"
          required: false
          schema:
            type: integer
        - name: page
          in: query
          description: "Page number of search results"
          required: false
          schema:
            type: integer
        - name: code
          in: query
          description: "Part or all of the source code in the solution"
          required: false
          schema:
            type: string
        - name: passedTests
          in: query
          description: "The number of test cases the solution passed"
          required: false
          schema:
            type: integer
        - name: compTime
          in: query
          description: "The amount of time required for the solution to run"
          required: false
          schema:
            type: string
      responses:
        "200":
          description: "List of solutions"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Response Solution"
  /comment:
    get:
      summary: "Get all Comments"
      operationId: listComment
      tags:
        - Comment
      responses:
        "200":
          description: "A list of all comments"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Response Comment"
    post:
      summary: "Create Comment"
      operationId: createComment
      tags:
        - Comment
      parameters:
        - name: problemId
          in: path
          description: "ID of the problem"
          required: true
          schema:
            type: integer
        - $ref: "#/components/parameters/Auth Token"
      requestBody:
        description: "Comment object to create"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request Comment"
      responses:
        "200":
          description: "Comment Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response Comment"
  /comment/{commentId}:
    get:
      summary: "Get Comment by Id"
      operationId: getComment
      tags:
        - Comment
      responses:
        "200":
          description: "A single Comment object"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response Comment"
    patch:
      summary: "Modify an existing Comment by ID."
      operationId: modifyComment
      tags:
        - Comment
      parameters:
        - name: commentId
          in: path
          description: "ID of the Comment to modify"
          required: true
          schema:
            type: integer
        - $ref: "#/components/parameters/Auth Token"
      requestBody:
        description: "Modified Comment"
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                comment:
                  type: string
      responses:
        "200":
          description: "Comment Modified"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response Comment"
    put:
      summary: "Replace an existing Comment by ID."
      operationId: replaceComment
      tags:
        - Comment
      parameters:
        - name: commentId
          in: path
          description: "ID of the Comment to overwrite"
          required: true
          schema:
            type: integer
        - $ref: "#/components/parameters/Auth Token"
      requestBody:
        description: "Replacing Comment object"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Request Comment"
      responses:
        "200":
          description: "Comment Replaced"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Response Comment"
  /comment/search:
    get:
      summary: "Search for a Comment."
      operationId: searchComment
      tags:
        - Comment
      parameters:
        - name: commentId
          in: query
          description: "Part or all of the commentId"
          required: false
          schema:
            type: string
        - name: commenter
          in: query
          description: "Part or all of the username of the commenter"
          required: false
          schema:
            type: string
        - name: problem
          in: query
          description: "Part or all of the id of the problem the comment is on"
          required: false
          schema:
            type: string
        - name: timestamp
          in: query
          description: "Part or all of the time the comment was posted"
          required: false
          schema:
            type: string
        - name: timestamp
          in: query
          description: "Part or all of the bodycomment was posted"
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: "Page number of search results"
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: "List of Comments"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Response Comment"
  /auth:
    post:
      summary: "Sign in a user"
      operationId: sign-in
      tags:
        - Authorization
      requestBody:
        description: "The code returned from GitHub or Microsoft via OAuth2.0"
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - code
              properties:
                code:
                  type: string
      responses:
        "200":
          description: "User signed in"
          required: true
          content:
            application/json:
              schema:
                type: object
                required:
                  - access_token
                  - expire_time
                  - refresh_token
                  - refresh_expire_time
                properties:
                  access_token:
                    type: string
                  expire_time:
                    type: integer
                  refresh_token:
                    type: string
                  refresh_expire_time:
                    type: integer
    delete:
      summary: "Sign out a user"
      operationId: sign-out
      tags:
        - Authorization
      parameters:
        - $ref: "#/components/parameters/Auth Token"
      responses:
        "200":
          description: "User logged out"
  /auth/refresh:
    post:
      summary: "Refresh a user's access token"
      operationId: refreshAccessToken
      tags:
        - Authorization
      requestBody:
        description: "The refresh token"
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refresh_token
              properties:
                refresh_token:
                  type: string
      responses:
        "200":
          description: "User signed in"
          required: true
          content:
            application/json:
              schema:
                type: object
                required:
                  - access_token
                  - expire_time
                  - refresh_token
                  - refresh_expire_time
                properties:
                  access_token:
                    type: string
                  expire_time:
                    type: integer
                  refresh_token:
                    type: string
                  refresh_expire_time:
                    type: integer
components:
  parameters:
    Auth Token:
      name: Authorization
      in: header
      description: "Authorization token"
      requred: true
      schema:
        type: string
  schemas:
    Request User:
      type: object
      required:
        - username
        - name
        - email
      properties:
        username:
          type: string
        name:
          type: string
        email:
          type: string
        admin:
          type: boolean
    Response User:
      type: object
      required:
        - username
        - name
        - email
        - admin
      properties:
        username:
          type: string
        name:
          type: string
        email:
          type: string
        admin:
          type: boolean
    Request Problem:
      type: object
      required:
        - poster
        - description
      properties:
        poster:
          type: string
        description:
          type: string
    Response Problem:
      type: object
      required:
        - problemId
        - poster
        - reviewed
        - description
      properties:
        problemid:
          type: integer
        poster:
          type: string
        reviewed:
          type: boolean
        description:
          type: string
    Parameter:
      type: object
      required:
        - problem
        - name
      properties:
        problem:
          type: integer
        name:
          type: string
    Request Test Case:
      type: object
      required:
        - problem
        - public
        - sampleInput
        - expectedOutput
      properties:
        tcid:
          type: integer
        problem:
          type: integer
        public:
          type: boolean
        sampleInput:
          type: string
        expectedOutput:
          type: string
    Response Test Case:
      type: object
      required:
        - tcid
        - problem
        - public
        - sampleInput
        - expectedOutput
      properties:
        tcid:
          type: integer
        problem:
          type: integer
        public:
          type: boolean
        sampleInput:
          type: string
        expectedOutput:
          type: string
    Request Solution:
      type: object
      required:
        - solver
        - problem
        - code
      properties:
        solutionId:
          type: integer
        solver:
          type: string
        problem:
          type: integer
        code:
          type: string
        passedTests:
          type: integer
        compTime:
          type: string
        totalTests:
          type: integer
    Response Solution:
      type: object
      required:
        - solutionId
        - solver
        - problem
        - code
        - passedTests
        - compTime
        - totalTests
      properties:
        solutionId:
          type: integer
        solver:
          type: string
        problem:
          type: integer
        code:
          type: string
        passedTests:
          type: integer
        compTime:
          type: double
        totalTests:
          type: integer
    Request Comment:
      type: object
      required:
        - commenter
        - problem
        - timestamp
        - comment
      properties:
        commentId:
          type: integer
        commenter:
          type: string
        problem:
          type: integer
        timestamp:
          type: string
        comment:
          type: string
    Response Comment:
      type: object
      required:
        - commentId
        - commenter
        - problem
        - timestamp
        - comment
      properties:
        commentId:
          type: integer
        commenter:
          type: string
        problem:
          type: integer
        timestamp:
          type: string
        comment:
          type: string
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
