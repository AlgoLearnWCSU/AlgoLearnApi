openapi: 3.0.0
info:
  version: 0.0.0
  title: AlgoLearn
servers:
  - url: "http://localhost:8080"
paths:
  /user:
    get:
      summary: "Get all Users."
      operationId: listUser
      tags:
        - User
      responses:
        "200":
          description: "A list of all users"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
  /user/{username}:
    get:
      summary: "Get a User by username."
      operationId: getUser
      tags:
        - User
      parameters:
        - name: username
          in: path
          description: "Username of the user"
          required: true
          schema:
            type: string
            format: string
      responses:
        "200":
          description: "Details about a user by username"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    post:
      summary: "Create a new user."
      operationId: createUser
      tags:
        - User
      parameters:
        - name: username
          in: path
          description: "Username of the user"
          required: true
          schema:
            type: string
            format: string
      requestBody:
        description: "User object to create"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "User Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    patch:
      summary: "Modify an existing user by username."
      operationId: modifyUser
      tags:
        - User
      parameters:
        - name: username
          in: path
          description: "Username of the user"
          required: true
          schema:
            type: string
            format: string
      requestBody:
        description: "User object to create"
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                name:
                  type: string
                email:
                  type: string
                admin:
                  type: boolean
      responses:
        "200":
          description: "User Modified"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    put:
      summary: "Replace an existing user by username."
      operationId: replaceUser
      tags:
        - User
      parameters:
        - name: username
          in: path
          description: "Username of the user"
          required: true
          schema:
            type: string
            format: string
      requestBody:
        description: "User object to create"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "User Replaced"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /user/search:
    get:
      summary: "Search a User by username."
      operationId: searchUser
      tags:
        - User
      parameters:
        - name: username
          in: query
          description: "Part or all of the username of the user"
          required: false
          schema:
            type: string
            format: string
        - name: page
          in: query
          description: "Page number of search results"
          required: false
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: "List of users"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
components:
  schemas:
    User:
      type: object
      required:
        - username
        - name
        - email
        - admin
      properties:
        username:
          type: string
        name:
          type: string
        email:
          type: string
        admin:
          type: boolean
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
